{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\nstartButton.disabled = true;\nconst dateTimePicker = document.querySelector('#datetime-picker');\nlet userSelectedDate = null;\nlet intervalId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (userSelectedDate <= currentDate) {\n      iziToast.error({   \n        title: 'Error',\n        message: 'Please choose a date in the future'}\n      )\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\nflatpickr(\"#datetime-picker\", options);\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n  intervalId = setInterval(() => {\n    const newEndDate = userSelectedDate.getTime()\n    const newDiff = newEndDate - new Date().getTime();\n    if (newDiff <= 0) {\n      clearInterval(intervalId);\n      updateTimer(0);\n      return;\n    }\n    updateTimer(newDiff)\n  }, 1000\n  );\n  \n})\n\nfunction updateTimer(newDiff) {\n  const { days, hours, minutes, seconds } = convertMs(newDiff);\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n \n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n   return String(value).padStart(2, \"0\");\n}\n"],"names":["startButton","dateTimePicker","userSelectedDate","intervalId","options","selectedDates","iziToast","flatpickr","newDiff","updateTimer","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"iyBAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACzDA,EAAY,SAAW,GACvB,MAAMC,EAAiB,SAAS,cAAc,kBAAkB,EAChE,IAAIC,EAAmB,KACnBC,EAAa,KAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAE9BH,GADgB,IAAI,MAEtBI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCAAoC,CAC9C,EACDN,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EACAO,EAAU,mBAAoBH,CAAO,EAErCJ,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBC,EAAe,SAAW,GAC1BE,EAAa,YAAY,IAAM,CAE7B,MAAMK,EADaN,EAAiB,QAAS,EAChB,IAAI,KAAM,EAAC,QAAO,EAC/C,GAAIM,GAAW,EAAG,CAChB,cAAcL,CAAU,EACxBM,EAAY,CAAC,EACb,MACD,CACDA,EAAYD,CAAO,CACvB,EAAK,GACL,CAEA,CAAC,EAED,SAASC,EAAYD,EAAS,CAC5B,KAAM,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAO,EAC3D,SAAS,cAAc,aAAa,EAAE,YAAcO,EAAeL,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAeJ,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcI,EAAeH,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAeF,CAAO,CAC/E,CAEA,SAASC,EAAUE,EAAI,CAQrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC5B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACvC"}